replicaCount: 1
labels: []

# global:
#   # Must follow Prometheus requirements for naming and match regex [a-zA-Z_][a-zA-Z0-9_]* (ACII letters, numbers and underscores)
#   # Overrides lpmonitoring.promKubeScrape
#   promKubeScrape: "scrape_staging"

lpmonitoring:
  image: livepeer/monitoring:latest
  # # Must follow Prometheus requirements for naming and match regex [a-zA-Z_][a-zA-Z0-9_]* (ACII letters, numbers and underscores)
  # # Overridden by global.promKubeScrape
  # promKubeScrape: "scrape_staging" 
  env:
    LP_PROMETHEUS_ENDPOINT: "http://localhost:9090/prometheus"
    LP_PROMETHEUS_EXTERNAL_URL: http://localhost:9090/prometheus
    LP_KUBE_NAMESPACES: default
    LP_PROMETHEUS_PREFIX: /prometheus
    GF_SECURITY_ADMIN_USER: "admin"
    GF_SECURITY_ADMIN_PASSWORD: "password"
    GF_AUTH_ANONYMOUS_ENABLED: "true"
    GF_AUTH_ANONYMOUS_ORG_NAME: "Main Org"
    GF_AUTH_ANONYMOUS_ORG_ROLE: "Viewer"
    GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    GF_SERVER_ROOT_URL: "http://localhost:3000/grafana"

  ports:
    - name: prom-dashboard
      containerPort: 9090
    - name: grafana
      containerPort: 3000

ingress:
  host: example.com
  labels: []
  annotations: []
  tls:
    - secretName: example.com
      hosts:
        - example.com

longterm:
  enabled: false

  # pgprom:
  #   image: timescale/pg_prometheus:latest-pg11
  #   env:
  #     POSTGRES_PASSWORD: "password"
  #   args:
  #     - "-c"
  #     - "synchronous_commit=OFF"
  #   ports:
  #     - containerPort: 5432
  #
  # adapter:
  #   image: timescale/prometheus-postgresql-adapter:latest
  #   args:
  #     - "-pg-host=localhost"
  #     - "-pg-prometheus-log-samples=false"
  #     - "-pg-password=password"
  #     - "-log-level=error"
  #   ports:
  #     - containerPort: 9201

persistence:
  enabled: false

  # prometheus:
  #   accessMode: ReadWriteOnce
  #   storageClass: managed-premium-retain
  #   size: 32Gi

  # pgprom:
  #   accessMode: ReadWriteOnce
  #   storageClass: managed-premium-retain
  #   size: 64Gi

  # storageClasses:
  #   - apiVersion: storage.k8s.io/v1
  #     name: managed-premium-retain
  #     provisioner: kubernetes.io/azure-disk
  #     reclaimPolicy: Retain
  #     allowVolumeExpansions: true
  #     parameters:
  #       storageaccounttype: Premium_LRS
  #       kind: Managed
  
rbac:
  create: false
